{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.4.1318.3566",
      "templateHash": "7304588431852542652"
    }
  },
  "parameters": {
    "connections_commondataservice_name": {
      "type": "string",
      "defaultValue": "commondataservice"
    },
    "workflows_ProvisionGenie_Main_name": {
      "type": "string",
      "defaultValue": "ProvisionGenie-Main"
    },
    "workflows_ProvisionGenie_Welcome_name": {
      "type": "string",
      "defaultValue": "ProvisionGenie-Welcome"
    },
    "workflows_ProvisionGenie_AddNotebook_name": {
      "type": "string",
      "defaultValue": "ProvisionGenie-AddNotebook"
    },
    "workflows_ProvisionGenie_AddPeople_name": {
      "type": "string",
      "defaultValue": "ProvisionGenie-AddPeople"
    },
    "workflows_ProvisionGenie_CreateListLibrary_name": {
      "type": "string",
      "defaultValue": "ProvisionGenie-CreateListLibrary"
    },
    "workflows_ProvisionGenie_CreateTeam_name": {
      "type": "string",
      "defaultValue": "ProvisionGenie-CreateTeam"
    },
    "workflows_ProvisionGenie_CreateTaskList_name": {
      "type": "string",
      "defaultValue": "ProvisionGenie-CreateTaskList"
    },
    "workflows_ProvisionGenie_PinTabToChannel_name": {
      "type": "string",
      "defaultValue": "ProvisionGenie-PinTabToChannel"
    },
    "userAssignedIdentities_ProvisionGenie_ManagedIdentity_name": {
      "type": "string",
      "defaultValue": "ProvisionGenie-ManagedIdentity"
    },
    "resourceLocation": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]"
    },
    "WelcomePackageUrl": {
      "type": "string"
    },
    "DataverseEnvironmentId": {
      "type": "string"
    },
    "servicePrincipal_AppId": {
      "type": "string"
    },
    "tenantURL": {
      "type": "string",
      "defaultValue": "tenantURL"
    },
    "tenantId": {
      "type": "string"
    },
    "servicePrincipal_ClientSecret": {
      "type": "secureString"
    },
    "servicePrincipal_TenantId": {
      "type": "string"
    }
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "managedIdentityDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "userAssignedIdentities_ProvisionGenie_ManagedIdentity_name": {
            "value": "[parameters('userAssignedIdentities_ProvisionGenie_ManagedIdentity_name')]"
          },
          "resourceLocation": {
            "value": "[parameters('resourceLocation')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1318.3566",
              "templateHash": "530966356748438205"
            }
          },
          "parameters": {
            "userAssignedIdentities_ProvisionGenie_ManagedIdentity_name": {
              "type": "string"
            },
            "resourceLocation": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2018-11-30",
              "name": "[parameters('userAssignedIdentities_ProvisionGenie_ManagedIdentity_name')]",
              "location": "[parameters('resourceLocation')]"
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "connectionsDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "connections_commondataservice_name": {
            "value": "[parameters('connections_commondataservice_name')]"
          },
          "resourceLocation": {
            "value": "[parameters('resourceLocation')]"
          },
          "servicePrincipal_AppId": {
            "value": "[parameters('servicePrincipal_AppId')]"
          },
          "servicePrincipal_ClientSecret": {
            "value": "[parameters('servicePrincipal_ClientSecret')]"
          },
          "servicePrincipal_TenantId": {
            "value": "[parameters('servicePrincipal_TenantId')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1318.3566",
              "templateHash": "7249634124728102236"
            }
          },
          "parameters": {
            "connections_commondataservice_name": {
              "type": "string"
            },
            "resourceLocation": {
              "type": "string"
            },
            "servicePrincipal_AppId": {
              "type": "string"
            },
            "servicePrincipal_ClientSecret": {
              "type": "secureString"
            },
            "servicePrincipal_TenantId": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Web/connections",
              "apiVersion": "2016-06-01",
              "name": "[parameters('connections_commondataservice_name')]",
              "location": "[parameters('resourceLocation')]",
              "kind": "V1",
              "properties": {
                "displayName": "[parameters('connections_commondataservice_name')]",
                "parameterValues": {
                  "token:clientId": "[parameters('servicePrincipal_AppId')]",
                  "token:clientSecret": "[parameters('servicePrincipal_ClientSecret')]",
                  "token:TenantId": "[parameters('servicePrincipal_TenantId')]",
                  "token:grantType": "client_credentials"
                },
                "api": {
                  "id": "[format('{0}/providers/Microsoft.Web/locations/{1}/managedApis/commondataservice', subscription().id, parameters('resourceLocation'))]"
                }
              }
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "createListLibraryDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "resourceLocation": {
            "value": "[parameters('resourceLocation')]"
          },
          "workflows_ProvisionGenie_CreateListLibrary_name": {
            "value": "[parameters('workflows_ProvisionGenie_CreateListLibrary_name')]"
          },
          "userAssignedIdentities_ProvisionGenie_ManagedIdentity_name": {
            "value": "[parameters('userAssignedIdentities_ProvisionGenie_ManagedIdentity_name')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1318.3566",
              "templateHash": "204428677409511351"
            }
          },
          "parameters": {
            "workflows_ProvisionGenie_CreateListLibrary_name": {
              "type": "string",
              "defaultValue": "ProvisionGenie-CreateListLibrary"
            },
            "userAssignedIdentities_ProvisionGenie_ManagedIdentity_name": {
              "type": "string"
            },
            "resourceLocation": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Logic/workflows",
              "apiVersion": "2019-05-01",
              "name": "[parameters('workflows_ProvisionGenie_CreateListLibrary_name')]",
              "location": "[parameters('resourceLocation')]",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', parameters('userAssignedIdentities_ProvisionGenie_ManagedIdentity_name')))]": {}
                }
              },
              "properties": {
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {},
                  "triggers": {
                    "manual": {
                      "type": "Request",
                      "kind": "Http",
                      "inputs": {
                        "schema": {
                          "properties": {
                            "columns": {
                              "items": {
                                "properties": {
                                  "columnName": {
                                    "type": "string"
                                  },
                                  "columnType": {
                                    "type": "string"
                                  },
                                  "columnValues": {
                                    "type": "array"
                                  }
                                },
                                "required": [
                                  "columnName",
                                  "columnType",
                                  "columnValues"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "resourceName": {
                              "type": "string"
                            },
                            "resourceType": {
                              "type": "string"
                            },
                            "siteId": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      }
                    }
                  },
                  "actions": {
                    "Columns": {
                      "runAfter": {},
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "Columns",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "For_each_Column": {
                      "foreach": "@triggerBody()?['columns']",
                      "actions": {
                        "Switch": {
                          "runAfter": {},
                          "cases": {
                            "Case_Choice": {
                              "case": "Choice",
                              "actions": {
                                "Append_choice_column_definition_to_Columns": {
                                  "runAfter": {},
                                  "type": "AppendToArrayVariable",
                                  "inputs": {
                                    "name": "Columns",
                                    "value": {
                                      "choice": {
                                        "choices": "@items('For_each_Column')?['columnValues']",
                                        "displayAs": "dropDownMenu"
                                      },
                                      "name": "@{items('For_each_Column')?['columnName']}"
                                    }
                                  }
                                }
                              }
                            },
                            "Case_Date": {
                              "case": "Date",
                              "actions": {
                                "Append_dateOnly_column_definition_to_Columns": {
                                  "runAfter": {},
                                  "type": "AppendToArrayVariable",
                                  "inputs": {
                                    "name": "Columns",
                                    "value": {
                                      "dateTime": {
                                        "format": "dateOnly"
                                      },
                                      "name": "@{items('For_each_Column')?['columnName']}"
                                    }
                                  }
                                }
                              }
                            },
                            "Case_DateTime": {
                              "case": "DateTime",
                              "actions": {
                                "Append_DateTime_column_definition_to_Columns": {
                                  "runAfter": {},
                                  "type": "AppendToArrayVariable",
                                  "inputs": {
                                    "name": "Columns",
                                    "value": {
                                      "dateTime": {
                                        "format": "dateTime"
                                      },
                                      "name": "@{items('For_each_Column')?['columnName']}"
                                    }
                                  }
                                }
                              }
                            },
                            "Case_Multiple_lines_of_text": {
                              "case": "Multiple lines of text",
                              "actions": {
                                "Append_multiline_text_column_definition_to_Columns": {
                                  "runAfter": {},
                                  "type": "AppendToArrayVariable",
                                  "inputs": {
                                    "name": "Columns",
                                    "value": {
                                      "name": "@{items('For_each_Column')?['columnName']}",
                                      "text": {
                                        "allowMultipleLines": true,
                                        "textType": "plain"
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "Case_Number": {
                              "case": "Number",
                              "actions": {
                                "Append_number_column_definition_to_Columns": {
                                  "runAfter": {},
                                  "type": "AppendToArrayVariable",
                                  "inputs": {
                                    "name": "Columns",
                                    "value": {
                                      "name": "@{items('For_each_Column')?['columnName']}",
                                      "number": {}
                                    }
                                  }
                                }
                              }
                            },
                            "Case_Person": {
                              "case": "Person",
                              "actions": {
                                "Append_Person_column_definition_to_Columns": {
                                  "runAfter": {},
                                  "type": "AppendToArrayVariable",
                                  "inputs": {
                                    "name": "Columns",
                                    "value": {
                                      "name": "@{items('For_each_Column')?['columnName']}",
                                      "personOrGroup": {
                                        "allowMultipleSelection": false,
                                        "chooseFromType": "peopleOnly"
                                      }
                                    }
                                  }
                                }
                              }
                            },
                            "Case_Text": {
                              "case": "Text",
                              "actions": {
                                "Append_text_column_definition_to_Columns": {
                                  "runAfter": {},
                                  "type": "AppendToArrayVariable",
                                  "inputs": {
                                    "name": "Columns",
                                    "value": {
                                      "name": "@{items('For_each_Column')?['columnName']}",
                                      "text": {}
                                    }
                                  }
                                }
                              }
                            },
                            "Case_Yes/No": {
                              "case": "yes/no",
                              "actions": {
                                "Append_boolean_column_definition_to_Columns": {
                                  "runAfter": {},
                                  "type": "AppendToArrayVariable",
                                  "inputs": {
                                    "name": "Columns",
                                    "value": {
                                      "boolean": {},
                                      "name": "@{items('For_each_Column')?['columnName']}"
                                    }
                                  }
                                }
                              }
                            }
                          },
                          "default": {
                            "actions": {}
                          },
                          "expression": "@items('For_each_Column')?['columnType']",
                          "type": "Switch"
                        }
                      },
                      "runAfter": {
                        "ResourceType": [
                          "Succeeded"
                        ]
                      },
                      "type": "Foreach",
                      "runtimeConfiguration": {
                        "concurrency": {
                          "repetitions": 1
                        }
                      }
                    },
                    "HTTP_create_resource": {
                      "runAfter": {
                        "Switch_resourceType": [
                          "Succeeded"
                        ]
                      },
                      "type": "Http",
                      "inputs": {
                        "authentication": {
                          "audience": "https://graph.microsoft.com",
                          "identity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentities_ProvisionGenie_ManagedIdentity_name'))]",
                          "type": "ManagedServiceIdentity"
                        },
                        "body": {
                          "columns": "@variables('Columns')",
                          "displayName": "@{triggerBody()?['resourceName']}",
                          "list": {
                            "template": "@{variables('ResourceType')}"
                          }
                        },
                        "headers": {
                          "content-type": "application/json"
                        },
                        "method": "POST",
                        "uri": "https://graph.microsoft.com/v1.0/sites/@{triggerBody()?['siteId']}/lists"
                      }
                    },
                    "ResourceType": {
                      "runAfter": {
                        "Columns": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "ResourceType",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Response": {
                      "runAfter": {
                        "HTTP_create_resource": [
                          "Succeeded"
                        ]
                      },
                      "type": "Response",
                      "kind": "Http",
                      "inputs": {
                        "body": {
                          "resourceId": "@{body('HTTP_create_resource')['id']}",
                          "webUrl": "@{body('HTTP_create_resource')['webUrl']}"
                        },
                        "headers": {
                          "content-type": "application/json"
                        },
                        "statusCode": 200
                      }
                    },
                    "Switch_resourceType": {
                      "runAfter": {
                        "For_each_Column": [
                          "Succeeded"
                        ]
                      },
                      "cases": {
                        "Case_Library": {
                          "case": "Library",
                          "actions": {
                            "Set_ResourceType_to_Library": {
                              "runAfter": {},
                              "type": "SetVariable",
                              "inputs": {
                                "name": "ResourceType",
                                "value": "documentLibrary"
                              }
                            }
                          }
                        },
                        "Case_List": {
                          "case": "List",
                          "actions": {
                            "Set_ResourceType_to_List": {
                              "runAfter": {},
                              "type": "SetVariable",
                              "inputs": {
                                "name": "ResourceType",
                                "value": "genericList"
                              }
                            }
                          }
                        }
                      },
                      "default": {
                        "actions": {}
                      },
                      "expression": "@triggerBody()?['resourceType']",
                      "type": "Switch"
                    }
                  },
                  "outputs": {}
                },
                "parameters": {}
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'managedIdentityDeployment')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "addPeopleDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "resourceLocation": {
            "value": "[parameters('resourceLocation')]"
          },
          "workflows_ProvisionGenie_AddPeople_name": {
            "value": "[parameters('workflows_ProvisionGenie_AddPeople_name')]"
          },
          "userAssignedIdentities_ProvisionGenie_ManagedIdentity_name": {
            "value": "[parameters('userAssignedIdentities_ProvisionGenie_ManagedIdentity_name')]"
          },
          "tenantId": {
            "value": "[parameters('tenantId')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1318.3566",
              "templateHash": "15134497652299199016"
            }
          },
          "parameters": {
            "workflows_ProvisionGenie_AddPeople_name": {
              "type": "string"
            },
            "userAssignedIdentities_ProvisionGenie_ManagedIdentity_name": {
              "type": "string"
            },
            "resourceLocation": {
              "type": "string"
            },
            "tenantId": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Logic/workflows",
              "apiVersion": "2019-05-01",
              "name": "[parameters('workflows_ProvisionGenie_AddPeople_name')]",
              "location": "[parameters('resourceLocation')]",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', parameters('userAssignedIdentities_ProvisionGenie_ManagedIdentity_name')))]": {}
                }
              },
              "properties": {
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "tenantId": {
                      "defaultValue": "[parameters('tenantId')]",
                      "type": "String"
                    }
                  },
                  "triggers": {
                    "manual": {
                      "type": "Request",
                      "kind": "Http",
                      "inputs": {
                        "schema": {
                          "members": {
                            "type": "string"
                          },
                          "owners": {
                            "type": "string"
                          },
                          "properties": {
                            "guests": "{\r\n \"Organization\": {\r\n \"type\": \"string\"\r\n  },\r\n  \"UPN\": {\r\n  \"type\": \"string\"\r\n },\r\n  \"firstName\": {\r\n \"type\": \"string\"\r\n },\r\n \"lastName\": {\r\n  \"type\": \"string\"\r\n  }\r\n }",
                            "type": "string"
                          },
                          "teamId": {
                            "type": "string"
                          },
                          "teamName": {
                            "type": "string"
                          },
                          "type": "object"
                        }
                      }
                    }
                  },
                  "actions": {
                    "Initialize_variable_People": {
                      "runAfter": {},
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "People",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Response": {
                      "runAfter": {
                        "Scope_add_people": [
                          "Succeeded"
                        ]
                      },
                      "type": "Response",
                      "kind": "Http",
                      "inputs": {
                        "statusCode": 200
                      }
                    },
                    "Scope_add_people": {
                      "actions": {
                        "For_each_guest": {
                          "foreach": "@split(triggerBody()?['guests'],'$')",
                          "actions": {
                            "Compose_UPN": {
                              "runAfter": {},
                              "type": "Compose",
                              "inputs": "@json(items('For_each_guest'))?['UPN']"
                            },
                            "Condition": {
                              "actions": {
                                "HTTP_-_add_user_to_this_group": {
                                  "runAfter": {},
                                  "type": "Http",
                                  "inputs": {
                                    "authentication": {
                                      "audience": "https://graph.microsoft.com",
                                      "identity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentities_ProvisionGenie_ManagedIdentity_name'))]",
                                      "type": "ManagedServiceIdentity"
                                    },
                                    "body": {
                                      "@@odata.id": "https://graph.microsoft.com/v1.0/directoryObjects/@{body('HTTP_-_get_user')?['value'][0]?['id']}"
                                    },
                                    "headers": {
                                      "": "application/json; odata=verbose",
                                      "Accept": "application/json; odata=verbose"
                                    },
                                    "method": "POST",
                                    "uri": "https://graph.microsoft.com/v1.0/groups/@{triggerBody()?['teamId']}/members/$ref"
                                  }
                                }
                              },
                              "runAfter": {
                                "HTTP_-_get_user": [
                                  "Succeeded"
                                ]
                              },
                              "else": {
                                "actions": {
                                  "HTTP_-_Update_User": {
                                    "runAfter": {
                                      "HTTP_-_post_invitation": [
                                        "Succeeded"
                                      ]
                                    },
                                    "type": "Http",
                                    "inputs": {
                                      "authentication": {
                                        "audience": "https://graph.microsoft.com",
                                        "identity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentities_ProvisionGenie_ManagedIdentity_name'))]",
                                        "type": "ManagedServiceIdentity"
                                      },
                                      "body": {
                                        "companyName": "@{json(triggerBody()?['guests'])?['Organization']}",
                                        "displayName": "@{Concat(json(triggerBody()?['guests'])?['firstName'],' ',json(triggerBody()?['guests'])?['lastName'])}",
                                        "givenName": "@{json(triggerBody()?['guests'])?['firstName']}",
                                        "surname": "@{json(triggerBody()?['guests'])?['lastName']}"
                                      },
                                      "headers": {
                                        "Content-type": "application/json"
                                      },
                                      "method": "PATCH",
                                      "uri": "https://graph.microsoft.com/v1.0/users/@{body('HTTP_-_post_invitation')?['invitedUser']?['id']}"
                                    }
                                  },
                                  "HTTP_-_add_user_to_group": {
                                    "runAfter": {
                                      "HTTP_-_Update_User": [
                                        "Succeeded"
                                      ]
                                    },
                                    "type": "Http",
                                    "inputs": {
                                      "authentication": {
                                        "audience": "https://graph.microsoft.com",
                                        "identity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentities_ProvisionGenie_ManagedIdentity_name'))]",
                                        "type": "ManagedServiceIdentity"
                                      },
                                      "body": {
                                        "@@odata.id": "https://graph.microsoft.com/v1.0/directoryObjects/@{body('HTTP_-_post_invitation')?['inviteduser']?['id']}"
                                      },
                                      "headers": {
                                        "Accept": "application/json; odata=verbose",
                                        "Content-type": "application/json; odata=verbose"
                                      },
                                      "method": "POST",
                                      "uri": "https://graph.microsoft.com/v1.0/groups/@{triggerBody()?['teamId']}/members/$ref"
                                    }
                                  },
                                  "HTTP_-_post_invitation": {
                                    "runAfter": {},
                                    "type": "Http",
                                    "inputs": {
                                      "authentication": {
                                        "audience": "https://graph.microsoft.com",
                                        "identity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentities_ProvisionGenie_ManagedIdentity_name'))]",
                                        "type": "ManagedServiceIdentity"
                                      },
                                      "body": {
                                        "inviteRedirectUrl": "https://account.activedirectory.windowsazure.com/?tenantid=@{parameters('tenantId')}&login_hint=@{outputs('Compose_UPN')}",
                                        "invitedUserEmailAddress": "@{outputs('Compose_UPN')}",
                                        "sendInvitationMessage": true
                                      },
                                      "headers": {
                                        "content-type": "application/json"
                                      },
                                      "method": "POST",
                                      "uri": "https://graph.microsoft.com/v1.0/invitations"
                                    }
                                  }
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "greater": [
                                      "@length(body('HTTP_-_get_user')?['value'])",
                                      0
                                    ]
                                  }
                                ]
                              },
                              "type": "If"
                            },
                            "HTTP_-_get_user": {
                              "runAfter": {
                                "Compose_UPN": [
                                  "Succeeded"
                                ]
                              },
                              "type": "Http",
                              "inputs": {
                                "authentication": {
                                  "audience": "https://graph.microsoft.com",
                                  "identity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentities_ProvisionGenie_ManagedIdentity_name'))]",
                                  "type": "ManagedServiceIdentity"
                                },
                                "headers": {
                                  "Content-Type": "application/json"
                                },
                                "method": "GET",
                                "uri": "https://graph.microsoft.com/v1.0/users/?$filter=mail%20eq%20'@{outputs('Compose_UPN')}'"
                              }
                            }
                          },
                          "runAfter": {
                            "HTTP_add_members_and_owners": [
                              "Succeeded"
                            ]
                          },
                          "type": "Foreach"
                        },
                        "For_each_member": {
                          "foreach": "@split(triggerBody()?['members'],';')",
                          "actions": {
                            "Append_to_array_variable": {
                              "runAfter": {},
                              "type": "AppendToArrayVariable",
                              "inputs": {
                                "name": "People",
                                "value": {
                                  "@@odata.type": "microsoft.graph.aadUserConversationMember",
                                  "roles": [],
                                  "user@odata.bind": "https://graph.microsoft.com/v1.0/users('@{items('For_each_member')}')"
                                }
                              }
                            }
                          },
                          "runAfter": {},
                          "type": "Foreach"
                        },
                        "For_each_owner": {
                          "foreach": "@split(triggerBody()?['owners'],';')",
                          "actions": {
                            "Append_to_array_variable_2": {
                              "runAfter": {},
                              "type": "AppendToArrayVariable",
                              "inputs": {
                                "name": "People",
                                "value": {
                                  "@@odata.type": "microsoft.graph.aadUserConversationMember",
                                  "roles": [
                                    "owner"
                                  ],
                                  "user@odata.bind": "https://graph.microsoft.com/v1.0/users('@{items('For_each_owner')}')"
                                }
                              }
                            }
                          },
                          "runAfter": {
                            "For_each_member": [
                              "Succeeded"
                            ]
                          },
                          "type": "Foreach"
                        },
                        "HTTP_add_members_and_owners": {
                          "runAfter": {
                            "For_each_owner": [
                              "Succeeded"
                            ]
                          },
                          "type": "Http",
                          "inputs": {
                            "authentication": {
                              "audience": "https://graph.microsoft.com",
                              "identity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentities_ProvisionGenie_ManagedIdentity_name'))]",
                              "type": "ManagedServiceIdentity"
                            },
                            "body": {
                              "values": "@variables('People')"
                            },
                            "headers": {
                              "Content-type": "application/json"
                            },
                            "method": "POST",
                            "uri": "https://graph.microsoft.com/v1.0/teams/@{triggerBody()?['teamId']}/members/add"
                          }
                        }
                      },
                      "runAfter": {
                        "Initialize_variable_People": [
                          "Succeeded"
                        ]
                      },
                      "type": "Scope"
                    }
                  },
                  "outputs": {}
                },
                "parameters": {}
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'managedIdentityDeployment')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "createTaskListDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "resourceLocation": {
            "value": "[parameters('resourceLocation')]"
          },
          "workflows_ProvisionGenie_CreateListLibrary_name": {
            "value": "[parameters('workflows_ProvisionGenie_CreateListLibrary_name')]"
          },
          "userAssignedIdentities_ProvisionGenie_ManagedIdentity_name": {
            "value": "[parameters('userAssignedIdentities_ProvisionGenie_ManagedIdentity_name')]"
          },
          "workflows_ProvisionGenie_CreateTaskList_name": {
            "value": "[parameters('workflows_ProvisionGenie_CreateTaskList_name')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1318.3566",
              "templateHash": "5911730910558978435"
            }
          },
          "parameters": {
            "workflows_ProvisionGenie_CreateTaskList_name": {
              "type": "string"
            },
            "userAssignedIdentities_ProvisionGenie_ManagedIdentity_name": {
              "type": "string"
            },
            "workflows_ProvisionGenie_CreateListLibrary_name": {
              "type": "string"
            },
            "resourceLocation": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Logic/workflows",
              "apiVersion": "2019-05-01",
              "name": "[parameters('workflows_ProvisionGenie_CreateTaskList_name')]",
              "location": "[parameters('resourceLocation')]",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', parameters('userAssignedIdentities_ProvisionGenie_ManagedIdentity_name')))]": {}
                }
              },
              "properties": {
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {},
                  "triggers": {
                    "manual": {
                      "type": "Request",
                      "kind": "Http",
                      "inputs": {
                        "schema": {
                          "properties": {
                            "siteId": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      }
                    }
                  },
                  "actions": {
                    "Response": {
                      "runAfter": {
                        "ProvisionGenie-CreateList": [
                          "Succeeded"
                        ]
                      },
                      "type": "Response",
                      "kind": "Http",
                      "inputs": {
                        "statusCode": 200
                      }
                    },
                    "ProvisionGenie-CreateList": {
                      "runAfter": {
                        "listColumns": [
                          "Succeeded"
                        ]
                      },
                      "type": "Workflow",
                      "inputs": {
                        "body": {
                          "listColumns": "@variables('listColumns')",
                          "listName": "Task List",
                          "siteId": "@triggerBody()?['siteId']"
                        },
                        "host": {
                          "triggerName": "manual",
                          "workflow": {
                            "id": "[resourceId('Microsoft.Logic/workflows', parameters('workflows_ProvisionGenie_CreateListLibrary_name'))]"
                          }
                        }
                      }
                    },
                    "listColumns": {
                      "runAfter": {},
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "listColumns",
                            "type": "array",
                            "value": [
                              {
                                "columnName": "Task Description",
                                "columnType": "Multiline text",
                                "columnvalues": null
                              },
                              {
                                "columnName": "Start date",
                                "columnType": "Date",
                                "columnvalues": null
                              },
                              {
                                "columnName": "Due date",
                                "columnType": "Date",
                                "columnvalues": null
                              },
                              {
                                "columnName": "Assigned to",
                                "columnType": "Person",
                                "columnvalues": null
                              },
                              {
                                "columnName": "Priority",
                                "columnType": "Choice",
                                "columnvalues": [
                                  "Normal",
                                  "High",
                                  "Low"
                                ]
                              },
                              {
                                "columnName": "Status",
                                "columnType": "Choice",
                                "columnvalues": [
                                  "Not started",
                                  "In progress",
                                  "Completed",
                                  "Blocked"
                                ]
                              }
                            ]
                          }
                        ]
                      }
                    }
                  },
                  "outputs": {}
                },
                "parameters": {}
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'createListLibraryDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'managedIdentityDeployment')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "createTeamDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "resourceLocation": {
            "value": "[parameters('resourceLocation')]"
          },
          "userAssignedIdentities_ProvisionGenie_ManagedIdentity_name": {
            "value": "[parameters('userAssignedIdentities_ProvisionGenie_ManagedIdentity_name')]"
          },
          "workflows_ProvisionGenie_CreateTeam_name": {
            "value": "[parameters('workflows_ProvisionGenie_CreateTeam_name')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1318.3566",
              "templateHash": "491896811505201483"
            }
          },
          "parameters": {
            "userAssignedIdentities_ProvisionGenie_ManagedIdentity_name": {
              "type": "string"
            },
            "resourceLocation": {
              "type": "string"
            },
            "workflows_ProvisionGenie_CreateTeam_name": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Logic/workflows",
              "apiVersion": "2019-05-01",
              "name": "[parameters('workflows_ProvisionGenie_CreateTeam_name')]",
              "location": "[parameters('resourceLocation')]",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', parameters('userAssignedIdentities_ProvisionGenie_ManagedIdentity_name')))]": {}
                }
              },
              "properties": {
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {},
                  "staticResults": {
                    "HTTP_delete_wiki_tab0": {
                      "status": "Succeeded",
                      "outputs": {
                        "headers": {},
                        "statusCode": "OK"
                      }
                    }
                  },
                  "triggers": {
                    "manual": {
                      "type": "Request",
                      "kind": "Http",
                      "inputs": {
                        "method": "POST",
                        "schema": {
                          "properties": {
                            "Channels": {
                              "items": {
                                "properties": {
                                  "description": {
                                    "type": "string"
                                  },
                                  "displayName": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "displayName",
                                  "description"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            },
                            "Description": {
                              "type": "string"
                            },
                            "Display Name": {
                              "type": "string"
                            },
                            "Owner UPN": {
                              "type": "string"
                            },
                            "Technical Name": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      }
                    }
                  },
                  "actions": {
                    "Configure_Channels": {
                      "actions": {
                        "For_each_channel": {
                          "foreach": "@body('Parse_channel_info')?['value']",
                          "actions": {
                            "For_each_wiki_tab": {
                              "foreach": "@body('Parse_wiki_tab_info')?['value']",
                              "actions": {
                                "HTTP_delete_wiki_tab": {
                                  "runAfter": {},
                                  "type": "Http",
                                  "inputs": {
                                    "authentication": {
                                      "audience": "https://graph.microsoft.com",
                                      "identity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentities_ProvisionGenie_ManagedIdentity_name'))]",
                                      "type": "ManagedServiceIdentity"
                                    },
                                    "method": "DELETE",
                                    "uri": "https://graph.microsoft.com/v1.0/teams/@{variables('TeamGroupId')}/channels/@{items('For_each_channel')?['id']}/tabs/@{items('For_each_wiki_tab')?['id']}"
                                  },
                                  "runtimeConfiguration": {
                                    "staticResult": {
                                      "staticResultOptions": "Disabled",
                                      "name": "HTTP_delete_wiki_tab0"
                                    }
                                  }
                                }
                              },
                              "runAfter": {
                                "Parse_wiki_tab_info": [
                                  "Succeeded"
                                ]
                              },
                              "type": "Foreach"
                            },
                            "HTTP_get_file_folder": {
                              "runAfter": {},
                              "type": "Http",
                              "inputs": {
                                "authentication": {
                                  "audience": "https://graph.microsoft.com",
                                  "identity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentities_ProvisionGenie_ManagedIdentity_name'))]",
                                  "type": "ManagedServiceIdentity"
                                },
                                "method": "GET",
                                "uri": "https://graph.microsoft.com/v1.0/teams/@{variables('TeamGroupId')}/channels/@{items('For_each_channel')?['id']}/filesFolder"
                              }
                            },
                            "HTTP_get_wiki_tab": {
                              "runAfter": {
                                "HTTP_get_file_folder": [
                                  "Succeeded"
                                ]
                              },
                              "type": "Http",
                              "inputs": {
                                "authentication": {
                                  "audience": "https://graph.microsoft.com",
                                  "identity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentities_ProvisionGenie_ManagedIdentity_name'))]",
                                  "type": "ManagedServiceIdentity"
                                },
                                "method": "GET",
                                "uri": "https://graph.microsoft.com/beta/teams/@{variables('TeamGroupId')}/channels/@{items('For_each_channel')?['id']}/tabs?$filter=displayName eq 'Wiki'"
                              }
                            },
                            "Parse_wiki_tab_info": {
                              "runAfter": {
                                "HTTP_get_wiki_tab": [
                                  "Succeeded"
                                ]
                              },
                              "type": "ParseJson",
                              "inputs": {
                                "content": "@body('HTTP_get_wiki_tab')",
                                "schema": {
                                  "properties": {
                                    "@@odata.context": {
                                      "type": "string"
                                    },
                                    "@@odata.count": {
                                      "type": "integer"
                                    },
                                    "value": {
                                      "items": {
                                        "properties": {
                                          "configuration": {
                                            "properties": {
                                              "contentUrl": {},
                                              "entityId": {},
                                              "hasContent": {
                                                "type": "boolean"
                                              },
                                              "removeUrl": {},
                                              "websiteUrl": {},
                                              "wikiDefaultTab": {
                                                "type": "boolean"
                                              },
                                              "wikiTabId": {
                                                "type": "integer"
                                              }
                                            },
                                            "type": "object"
                                          },
                                          "displayName": {
                                            "type": "string"
                                          },
                                          "id": {
                                            "type": "string"
                                          },
                                          "messageId": {},
                                          "sortOrderIndex": {
                                            "type": "string"
                                          },
                                          "teamsAppId": {},
                                          "webUrl": {
                                            "type": "string"
                                          }
                                        },
                                        "required": [
                                          "id",
                                          "displayName",
                                          "teamsAppId",
                                          "sortOrderIndex",
                                          "messageId",
                                          "webUrl",
                                          "configuration"
                                        ],
                                        "type": "object"
                                      },
                                      "type": "array"
                                    }
                                  },
                                  "type": "object"
                                }
                              }
                            }
                          },
                          "runAfter": {
                            "Parse_channel_info": [
                              "Succeeded"
                            ]
                          },
                          "type": "Foreach",
                          "description": "Remove the wiki from each created channel"
                        },
                        "HTTP_get_channels": {
                          "runAfter": {},
                          "type": "Http",
                          "inputs": {
                            "authentication": {
                              "audience": "https://graph.microsoft.com",
                              "identity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentities_ProvisionGenie_ManagedIdentity_name'))]",
                              "type": "ManagedServiceIdentity"
                            },
                            "method": "GET",
                            "uri": "https://graph.microsoft.com/v1.0/teams/@{variables('TeamGroupId')}/channels"
                          }
                        },
                        "Parse_channel_info": {
                          "runAfter": {
                            "HTTP_get_channels": [
                              "Succeeded"
                            ]
                          },
                          "type": "ParseJson",
                          "inputs": {
                            "content": "@body('HTTP_get_channels')",
                            "schema": {
                              "properties": {
                                "@@odata.context": {
                                  "type": "string"
                                },
                                "@@odata.count": {
                                  "type": "integer"
                                },
                                "value": {
                                  "items": {
                                    "properties": {
                                      "description": {
                                        "type": [
                                          "string",
                                          "null"
                                        ]
                                      },
                                      "displayName": {
                                        "type": "string"
                                      },
                                      "email": {
                                        "type": "string"
                                      },
                                      "id": {
                                        "type": "string"
                                      },
                                      "isFavoriteByDefault": {},
                                      "membershipType": {
                                        "type": "string"
                                      },
                                      "webUrl": {
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "id",
                                      "displayName",
                                      "description",
                                      "isFavoriteByDefault",
                                      "email",
                                      "webUrl",
                                      "membershipType"
                                    ],
                                    "type": "object"
                                  },
                                  "type": "array"
                                }
                              },
                              "type": "object"
                            }
                          }
                        }
                      },
                      "runAfter": {
                        "Ensure_Team_Exists": [
                          "Succeeded"
                        ]
                      },
                      "type": "Scope"
                    },
                    "Ensure_Group_Exists": {
                      "actions": {
                        "Does_Group_exist": {
                          "actions": {
                            "Set_TeamGroupId_to_existing_value": {
                              "runAfter": {},
                              "type": "SetVariable",
                              "inputs": {
                                "name": "TeamGroupId",
                                "value": "@{body('Get_Group_for_technical_name')['value'][0]['id']}"
                              }
                            }
                          },
                          "runAfter": {
                            "Get_Group_for_technical_name": [
                              "Succeeded"
                            ]
                          },
                          "else": {
                            "actions": {
                              "HTTP_create_group": {
                                "runAfter": {
                                  "HTTP_get_owner_info": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "Http",
                                "inputs": {
                                  "authentication": {
                                    "audience": "https://graph.microsoft.com",
                                    "identity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentities_ProvisionGenie_ManagedIdentity_name'))]",
                                    "type": "ManagedServiceIdentity"
                                  },
                                  "body": {
                                    "description": "@{triggerBody()?['Description']}",
                                    "displayName": "@{triggerBody()?['Display Name']}",
                                    "groupTypes": [
                                      "Unified"
                                    ],
                                    "mailEnabled": true,
                                    "mailNickname": "@{triggerBody()?['Technical Name']}",
                                    "members@odata.bind": [
                                      "https://graph.microsoft.com/v1.0/users/@{body('HTTP_get_owner_info')['id']}"
                                    ],
                                    "owners@odata.bind": [
                                      "https://graph.microsoft.com/v1.0/users/@{body('HTTP_get_owner_info')['id']}"
                                    ],
                                    "resourceBehaviorOptions": [
                                      "HideGroupInOutlook",
                                      "SubscribeMembersToCalendarEventsDisabled",
                                      "WelcomeEmailDisabled"
                                    ],
                                    "securityEnabled": false,
                                    "visibility": "Private"
                                  },
                                  "headers": {
                                    "Content-type": "application/json"
                                  },
                                  "method": "POST",
                                  "uri": "https://graph.microsoft.com/v1.0/groups"
                                }
                              },
                              "HTTP_get_owner_info": {
                                "runAfter": {},
                                "type": "Http",
                                "inputs": {
                                  "authentication": {
                                    "audience": "https://graph.microsoft.com",
                                    "identity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentities_ProvisionGenie_ManagedIdentity_name'))]",
                                    "type": "ManagedServiceIdentity"
                                  },
                                  "method": "GET",
                                  "uri": "https://graph.microsoft.com/v1.0/users/@{triggerBody()?['Owner UPN']}"
                                }
                              },
                              "Set_TeamGroupId_to_created_group_id": {
                                "runAfter": {
                                  "HTTP_create_group": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "SetVariable",
                                "inputs": {
                                  "name": "TeamGroupId",
                                  "value": "@{body('HTTP_create_group')['id']}"
                                }
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "not": {
                                  "equals": [
                                    "@length(body('Get_Group_for_technical_name')?['Value'])",
                                    0
                                  ]
                                }
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "Get_Group_for_technical_name": {
                          "runAfter": {},
                          "type": "Http",
                          "inputs": {
                            "authentication": {
                              "audience": "https://graph.microsoft.com",
                              "identity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentities_ProvisionGenie_ManagedIdentity_name'))]",
                              "type": "ManagedServiceIdentity"
                            },
                            "method": "GET",
                            "uri": "https://graph.microsoft.com/v1.0/groups?$filter=mailNickname eq '@{triggerBody()?['Technical Name']}'&$select=id,displayName,mailNickname&$count=true&$top=1"
                          }
                        }
                      },
                      "runAfter": {
                        "Initialize_TeamGroupId": [
                          "Succeeded"
                        ]
                      },
                      "type": "Scope"
                    },
                    "Ensure_Team_Exists": {
                      "actions": {
                        "Does_Team_exist": {
                          "actions": {},
                          "else": {
                            "actions": {
                              "Until_Team_upgrade_accepted": {
                                "actions": {
                                  "HTTP_update_group_to_team": {
                                    "inputs": {
                                      "authentication": {
                                        "audience": "https://graph.microsoft.com",
                                        "identity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentities_ProvisionGenie_ManagedIdentity_name'))]",
                                        "type": "ManagedServiceIdentity"
                                      },
                                      "body": {
                                        "channels": "@triggerBody()?['Channels']",
                                        "group@odata.bind": "https://graph.microsoft.com/v1.0/groups('@{variables('TeamGroupId')}')",
                                        "template@odata.bind": "https://graph.microsoft.com/v1.0/teamsTemplates('standard')"
                                      },
                                      "headers": {
                                        "content-type": "application/json"
                                      },
                                      "method": "POST",
                                      "uri": "https://graph.microsoft.com/v1.0/teams"
                                    },
                                    "runAfter": {},
                                    "type": "Http"
                                  },
                                  "Set_TeamCreationRequestCode_to_Status_code": {
                                    "inputs": {
                                      "name": "TeamCreationRequestCode",
                                      "value": "@{outputs('HTTP_update_group_to_team')['statusCode']}"
                                    },
                                    "runAfter": {
                                      "HTTP_update_group_to_team": [
                                        "Succeeded",
                                        "Failed"
                                      ]
                                    },
                                    "type": "SetVariable"
                                  },
                                  "Validate_StatusCode": {
                                    "actions": {
                                      "Delay_10_seconds_for_404": {
                                        "inputs": {
                                          "interval": {
                                            "count": 10,
                                            "unit": "Second"
                                          }
                                        },
                                        "runAfter": {},
                                        "type": "Wait"
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "equals": [
                                            "@variables('TeamCreationRequestCode')",
                                            "@string(404)"
                                          ]
                                        }
                                      ]
                                    },
                                    "runAfter": {
                                      "Set_TeamCreationRequestCode_to_Status_code": [
                                        "Succeeded"
                                      ]
                                    },
                                    "type": "If"
                                  }
                                },
                                "expression": "@equals(variables('TeamCreationRequestCode'), string(202))",
                                "limit": {
                                  "count": 60,
                                  "timeout": "PT1H"
                                },
                                "runAfter": {},
                                "type": "Until"
                              },
                              "Until_Team_upgrade_succeeded": {
                                "actions": {
                                  "Condition_TeamsCreationStatus_not_succeeded": {
                                    "actions": {
                                      "Delay_10_seconds_for_team_upgrade": {
                                        "inputs": {
                                          "interval": {
                                            "count": 10,
                                            "unit": "Second"
                                          }
                                        },
                                        "runAfter": {},
                                        "type": "Wait"
                                      }
                                    },
                                    "expression": {
                                      "and": [
                                        {
                                          "not": {
                                            "equals": [
                                              "@variables('TeamCreationStatus')",
                                              "succeeded"
                                            ]
                                          }
                                        }
                                      ]
                                    },
                                    "runAfter": {
                                      "Set_TeamsCreationStatus": [
                                        "Succeeded"
                                      ]
                                    },
                                    "type": "If"
                                  },
                                  "HTTP_get_team_creation_status": {
                                    "inputs": {
                                      "authentication": {
                                        "audience": "https://graph.microsoft.com",
                                        "identity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentities_ProvisionGenie_ManagedIdentity_name'))]",
                                        "type": "ManagedServiceIdentity"
                                      },
                                      "method": "GET",
                                      "uri": "https://graph.microsoft.com/v1.0@{outputs('HTTP_update_group_to_team')['headers']['location']}"
                                    },
                                    "runAfter": {},
                                    "type": "Http"
                                  },
                                  "Set_TeamsCreationStatus": {
                                    "inputs": {
                                      "name": "TeamCreationStatus",
                                      "value": "@{body('HTTP_get_team_creation_status')['status']}"
                                    },
                                    "runAfter": {
                                      "HTTP_get_team_creation_status": [
                                        "Succeeded"
                                      ]
                                    },
                                    "type": "SetVariable"
                                  }
                                },
                                "expression": "@equals(variables('TeamCreationStatus'), 'succeeded')",
                                "limit": {
                                  "count": 60,
                                  "timeout": "PT1H"
                                },
                                "runAfter": {
                                  "Until_Team_upgrade_accepted": [
                                    "Succeeded"
                                  ]
                                },
                                "type": "Until"
                              }
                            }
                          },
                          "expression": {
                            "and": [
                              {
                                "equals": [
                                  "@outputs('HTTP_Get_Team')['statusCode']",
                                  200
                                ]
                              }
                            ]
                          },
                          "runAfter": {
                            "HTTP_Get_Team": [
                              "Succeeded",
                              "Failed"
                            ]
                          },
                          "type": "If"
                        },
                        "HTTP_Get_Team": {
                          "inputs": {
                            "authentication": {
                              "audience": "https://graph.microsoft.com",
                              "identity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentities_ProvisionGenie_ManagedIdentity_name'))]",
                              "type": "ManagedServiceIdentity"
                            },
                            "headers": {
                              "Content-Type": "application/json"
                            },
                            "method": "GET",
                            "uri": "https://graph.microsoft.com/v1.0/teams/@{variables('TeamGroupId')}"
                          },
                          "runAfter": {},
                          "type": "Http"
                        }
                      },
                      "runAfter": {
                        "Ensure_Group_Exists": [
                          "Succeeded"
                        ]
                      },
                      "type": "Scope"
                    },
                    "Initialize_TeamCreationRequestCode": {
                      "runAfter": {},
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "TeamCreationRequestCode",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_TeamCreationStatus": {
                      "runAfter": {
                        "Initialize_TeamCreationRequestCode": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "TeamCreationStatus",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Initialize_TeamGroupId": {
                      "runAfter": {
                        "Initialize_TeamCreationStatus": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "TeamGroupId",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Response": {
                      "runAfter": {
                        "Configure_Channels": [
                          "Succeeded"
                        ]
                      },
                      "type": "Response",
                      "kind": "Http",
                      "inputs": {
                        "body": {
                          "TeamId": "@{variables('TeamGroupId')}",
                          "TeamsDisplayName": "@{triggerBody()?['Display Name']}"
                        },
                        "statusCode": 200
                      }
                    }
                  },
                  "outputs": {}
                },
                "parameters": {}
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'managedIdentityDeployment')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "welcomePackageDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "resourceLocation": {
            "value": "[parameters('resourceLocation')]"
          },
          "userAssignedIdentities_ProvisionGenie_ManagedIdentity_name": {
            "value": "[parameters('userAssignedIdentities_ProvisionGenie_ManagedIdentity_name')]"
          },
          "workflows_ProvisionGenie_Welcome_name": {
            "value": "[parameters('workflows_ProvisionGenie_Welcome_name')]"
          },
          "WelcomePackageUrl": {
            "value": "[parameters('WelcomePackageUrl')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1318.3566",
              "templateHash": "7483435073459438037"
            }
          },
          "parameters": {
            "workflows_ProvisionGenie_Welcome_name": {
              "type": "string"
            },
            "userAssignedIdentities_ProvisionGenie_ManagedIdentity_name": {
              "type": "string"
            },
            "resourceLocation": {
              "type": "string"
            },
            "WelcomePackageUrl": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Logic/workflows",
              "apiVersion": "2019-05-01",
              "name": "[parameters('workflows_ProvisionGenie_Welcome_name')]",
              "location": "[parameters('resourceLocation')]",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', parameters('userAssignedIdentities_ProvisionGenie_ManagedIdentity_name')))]": {}
                }
              },
              "properties": {
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "Welcome package url": {
                      "defaultValue": "[parameters('WelcomePackageUrl')]",
                      "type": "String"
                    }
                  },
                  "triggers": {
                    "manual": {
                      "type": "Request",
                      "kind": "Http",
                      "inputs": {
                        "method": "POST",
                        "schema": {
                          "properties": {
                            "Owner": {
                              "type": "string"
                            },
                            "TeamId": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      }
                    }
                  },
                  "actions": {
                    "Get_First_Channel": {
                      "runAfter": {
                        "Parse_Channel_info": [
                          "Succeeded"
                        ]
                      },
                      "type": "Compose",
                      "inputs": "@first(body('Parse_Channel_info')?['value'])",
                      "description": "The first channel is the General channel"
                    },
                    "HTTP_Get_channels": {
                      "runAfter": {
                        "Owner": [
                          "Succeeded"
                        ]
                      },
                      "type": "Http",
                      "inputs": {
                        "authentication": {
                          "audience": "https://graph.microsoft.com",
                          "identity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentities_ProvisionGenie_ManagedIdentity_name'))]",
                          "type": "ManagedServiceIdentity"
                        },
                        "method": "GET",
                        "uri": "https://graph.microsoft.com/v1.0/teams/@{variables('TeamId')}/channels"
                      },
                      "description": "Get all channels present in the team"
                    },
                    "HTTP_pin_training_material": {
                      "runAfter": {
                        "Get_First_Channel": [
                          "Succeeded"
                        ]
                      },
                      "type": "Http",
                      "inputs": {
                        "authentication": {
                          "audience": "https://graph.microsoft.com",
                          "identity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentities_ProvisionGenie_ManagedIdentity_name'))]",
                          "type": "ManagedServiceIdentity"
                        },
                        "body": {
                          "configuration": {
                            "contentUrl": "@{parameters('Welcome package url')}",
                            "entityId": "",
                            "removeUrl": null,
                            "websiteUrl": "@{parameters('Welcome package url')}"
                          },
                          "displayName": "Training Material",
                          "teamsApp@odata.bind": "https://graph.microsoft.com/v1.0/appCatalogs/teamsApps/com.microsoft.teamspace.tab.web"
                        },
                        "headers": {
                          "content-type": "application/json"
                        },
                        "method": "POST",
                        "uri": "https://graph.microsoft.com/v1.0/teams/@{variables('TeamId')}/channels/@{outputs('Get_First_Channel')?['id']}/tabs"
                      },
                      "description": "Pin a document library with training material to the General channel"
                    },
                    "Owner": {
                      "runAfter": {
                        "TeamId": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "Owner",
                            "type": "string",
                            "value": "@body('Parse_trigger_body')?['Owner']"
                          }
                        ]
                      }
                    },
                    "Parse_Channel_info": {
                      "runAfter": {
                        "HTTP_Get_channels": [
                          "Succeeded"
                        ]
                      },
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@body('HTTP_Get_channels')",
                        "schema": {
                          "properties": {
                            "@@odata.context": {
                              "type": "string"
                            },
                            "@@odata.count": {
                              "type": "integer"
                            },
                            "value": {
                              "items": {
                                "properties": {
                                  "description": {
                                    "type": [
                                      "string",
                                      "null"
                                    ]
                                  },
                                  "displayName": {
                                    "type": "string"
                                  },
                                  "email": {
                                    "type": "string"
                                  },
                                  "id": {
                                    "type": "string"
                                  },
                                  "isFavoriteByDefault": {},
                                  "membershipType": {
                                    "type": "string"
                                  },
                                  "webUrl": {
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "id",
                                  "displayName",
                                  "description",
                                  "isFavoriteByDefault",
                                  "email",
                                  "webUrl",
                                  "membershipType"
                                ],
                                "type": "object"
                              },
                              "type": "array"
                            }
                          },
                          "type": "object"
                        }
                      }
                    },
                    "Parse_trigger_body": {
                      "runAfter": {},
                      "type": "ParseJson",
                      "inputs": {
                        "content": "@triggerBody()",
                        "schema": {
                          "properties": {
                            "Owner": {
                              "type": "string"
                            },
                            "TeamId": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      }
                    },
                    "Response": {
                      "runAfter": {
                        "HTTP_pin_training_material": [
                          "Succeeded"
                        ]
                      },
                      "type": "Response",
                      "kind": "Http",
                      "inputs": {
                        "statusCode": 200
                      }
                    },
                    "TeamId": {
                      "runAfter": {
                        "Parse_trigger_body": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "TeamId",
                            "type": "string",
                            "value": "@body('Parse_trigger_body')?['TeamId']"
                          }
                        ]
                      }
                    }
                  },
                  "outputs": {}
                },
                "parameters": {}
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'managedIdentityDeployment')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "addNotebookDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "resourceLocation": {
            "value": "[parameters('resourceLocation')]"
          },
          "userAssignedIdentities_ProvisionGenie_ManagedIdentity_name": {
            "value": "[parameters('userAssignedIdentities_ProvisionGenie_ManagedIdentity_name')]"
          },
          "workflows_ProvisionGenie_AddNotebook_name": {
            "value": "[parameters('workflows_ProvisionGenie_AddNotebook_name')]"
          },
          "tenantURL": {
            "value": "[parameters('tenantURL')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1318.3566",
              "templateHash": "15628610083170355085"
            }
          },
          "parameters": {
            "workflows_ProvisionGenie_AddNotebook_name": {
              "type": "string"
            },
            "resourceLocation": {
              "type": "string"
            },
            "tenantURL": {
              "type": "string"
            },
            "userAssignedIdentities_ProvisionGenie_ManagedIdentity_name": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Logic/workflows",
              "apiVersion": "2019-05-01",
              "name": "[parameters('workflows_ProvisionGenie_AddNotebook_name')]",
              "location": "[parameters('resourceLocation')]",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', parameters('userAssignedIdentities_ProvisionGenie_ManagedIdentity_name')))]": {}
                }
              },
              "properties": {
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "tenantURL": {
                      "defaultValue": "[parameters('tenantURL')]",
                      "type": "String"
                    }
                  },
                  "triggers": {
                    "manual": {
                      "type": "Request",
                      "kind": "Http",
                      "inputs": {
                        "schema": {
                          "properties": {
                            "teamId": {
                              "type": "string"
                            },
                            "teamName": {
                              "type": "string"
                            },
                            "teamsTechnicalName": {
                              "type": "string"
                            }
                          },
                          "type": "object"
                        }
                      }
                    }
                  },
                  "actions": {
                    "HTTP_-_Add_Notebook_to_channel_general": {
                      "runAfter": {
                        "Initialize_variable_Notebook_URL": [
                          "Succeeded"
                        ]
                      },
                      "type": "Http",
                      "inputs": {
                        "authentication": {
                          "audience": "https://graph.microsoft.com",
                          "identity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentities_ProvisionGenie_ManagedIdentity_name'))]",
                          "type": "ManagedServiceIdentity"
                        },
                        "body": {
                          "configuration": {
                            "contentUrl": "@{variables('URL')}",
                            "entityId": "",
                            "removeUrl": null,
                            "websiteUrl": "@{variables('URL')}"
                          },
                          "displayName": "Notes",
                          "teamsApp@odata.bind": "https://graph.microsoft.com/v1.0/appCatalogs/teamsApps/0d820ecd-def2-4297-adad-78056cde7c78"
                        },
                        "headers": {
                          "Content-type": "application/json"
                        },
                        "method": "POST",
                        "uri": "https://graph.microsoft.com/v1.0/teams/@{triggerBody()?['teamId']}/channels/@{body('HTTP_-_Get_Channels')?['value'][0]?['id']}/tabs"
                      }
                    },
                    "HTTP_-_Create_page": {
                      "runAfter": {
                        "HTTP_-_Create_section": [
                          "Succeeded"
                        ]
                      },
                      "type": "Http",
                      "inputs": {
                        "authentication": {
                          "audience": "https://graph.microsoft.com",
                          "identity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentities_ProvisionGenie_ManagedIdentity_name'))]",
                          "type": "ManagedServiceIdentity"
                        },
                        "body": "<!DOCTYPE html>\n<html>\n  <head>\n    <title>Welcome</title>\n    <meta name=\"created\" content=\"@{utcNow()}\" />\n  </head>\n  <body>\n    <p>You can start taking notes ✍ here - create sections  and pages as you need them 💡</p>\n  </body>\n</html>",
                        "headers": {
                          "Content-Type": "text/html"
                        },
                        "method": "POST",
                        "uri": "https://graph.microsoft.com/v1.0/groups/@{triggerBody()?['teamId']}/onenote/sections/@{body('HTTP_-_Create_section')?['id']}/pages"
                      }
                    },
                    "HTTP_-_Create_section": {
                      "runAfter": {
                        "HTTP_-_Get_Notebook": [
                          "Succeeded"
                        ]
                      },
                      "type": "Http",
                      "inputs": {
                        "authentication": {
                          "audience": "https://graph.microsoft.com",
                          "identity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentities_ProvisionGenie_ManagedIdentity_name'))]",
                          "type": "ManagedServiceIdentity"
                        },
                        "body": {
                          "displayName": "ideas"
                        },
                        "headers": {
                          "content-type": "application/json"
                        },
                        "method": "POST",
                        "uri": "https://graph.microsoft.com/v1.0/groups/@{triggerBody()?['teamId']}/onenote/notebooks/@{body('HTTP_-_Get_Notebook')?['value'][0]?['id']}/sections"
                      }
                    },
                    "HTTP_-_Get_Channels": {
                      "runAfter": {},
                      "type": "Http",
                      "inputs": {
                        "authentication": {
                          "audience": "https://graph.microsoft.com",
                          "identity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentities_ProvisionGenie_ManagedIdentity_name'))]",
                          "type": "ManagedServiceIdentity"
                        },
                        "method": "GET",
                        "uri": "https://graph.microsoft.com/v1.0/teams/@{triggerBody()?['teamId']}/channels"
                      }
                    },
                    "HTTP_-_Get_Notebook": {
                      "runAfter": {
                        "HTTP_-_Trigger_Notebook_Creation": [
                          "Succeeded"
                        ]
                      },
                      "type": "Http",
                      "inputs": {
                        "authentication": {
                          "audience": "https://graph.microsoft.com",
                          "identity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentities_ProvisionGenie_ManagedIdentity_name'))]",
                          "type": "ManagedServiceIdentity"
                        },
                        "headers": {
                          "content-type": "application/json"
                        },
                        "method": "GET",
                        "uri": "https://graph.microsoft.com/v1.0/groups/@{triggerBody()?['teamId']}/onenote/notebooks"
                      }
                    },
                    "HTTP_-_Trigger_Notebook_Creation": {
                      "runAfter": {
                        "HTTP_-_Get_Channels": [
                          "Succeeded"
                        ]
                      },
                      "type": "Http",
                      "inputs": {
                        "authentication": {
                          "audience": "@{parameters('tenantURL')}",
                          "identity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentities_ProvisionGenie_ManagedIdentity_name'))]",
                          "type": "ManagedServiceIdentity"
                        },
                        "headers": {
                          "Accept": "application/json;odata=verbose"
                        },
                        "method": "POST",
                        "uri": "@{parameters('tenantURL')}/sites/@{triggerBody()?['teamsTechnicalName']}/_api/web/features/add('f151bb39-7c3b-414f-bb36-6bf18872052f')"
                      }
                    },
                    "Initialize_variable_Notebook_URL": {
                      "runAfter": {
                        "HTTP_-_Create_page": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "URL",
                            "type": "string",
                            "value": "@{body('HTTP_-_Get_Notebook')?['value'][0]?['links']?['oneNoteWebUrl']?['href']}"
                          }
                        ]
                      }
                    },
                    "Response": {
                      "runAfter": {
                        "HTTP_-_Add_Notebook_to_channel_general": [
                          "Succeeded"
                        ]
                      },
                      "type": "Response",
                      "kind": "Http",
                      "inputs": {
                        "statusCode": 200
                      }
                    }
                  },
                  "outputs": {}
                },
                "parameters": {}
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'managedIdentityDeployment')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "MainDeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "resourceLocation": {
            "value": "[parameters('resourceLocation')]"
          },
          "userAssignedIdentities_ProvisionGenie_ManagedIdentity_name": {
            "value": "[parameters('userAssignedIdentities_ProvisionGenie_ManagedIdentity_name')]"
          },
          "workflows_ProvisionGenie_Welcome_name": {
            "value": "[parameters('workflows_ProvisionGenie_Welcome_name')]"
          },
          "connections_commondataservice_name": {
            "value": "[parameters('connections_commondataservice_name')]"
          },
          "DataverseEnvironmentId": {
            "value": "[parameters('DataverseEnvironmentId')]"
          },
          "workflows_ProvisionGenie_CreateListLibrary_name": {
            "value": "[parameters('workflows_ProvisionGenie_CreateListLibrary_name')]"
          },
          "workflows_ProvisionGenie_CreateTaskList_name": {
            "value": "[parameters('workflows_ProvisionGenie_CreateTaskList_name')]"
          },
          "workflows_ProvisionGenie_CreateTeam_name": {
            "value": "[parameters('workflows_ProvisionGenie_CreateTeam_name')]"
          },
          "workflows_ProvisionGenie_Main_name": {
            "value": "[parameters('workflows_ProvisionGenie_Main_name')]"
          },
          "workflows_ProvisionGenie_AddPeople_name": {
            "value": "[parameters('workflows_ProvisionGenie_AddPeople_name')]"
          },
          "workflows_ProvisionGenie_AddNotebook_name": {
            "value": "[parameters('workflows_ProvisionGenie_AddNotebook_name')]"
          },
          "workflows_ProvisionGenie_PinTabToChannel_name": {
            "value": "[parameters('workflows_ProvisionGenie_PinTabToChannel_name')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1318.3566",
              "templateHash": "6728246930990678687"
            }
          },
          "parameters": {
            "workflows_ProvisionGenie_Main_name": {
              "type": "string"
            },
            "workflows_ProvisionGenie_AddPeople_name": {
              "type": "string"
            },
            "workflows_ProvisionGenie_AddNotebook_name": {
              "type": "string"
            },
            "workflows_ProvisionGenie_Welcome_name": {
              "type": "string"
            },
            "workflows_ProvisionGenie_CreateTaskList_name": {
              "type": "string"
            },
            "workflows_ProvisionGenie_CreateListLibrary_name": {
              "type": "string"
            },
            "workflows_ProvisionGenie_PinTabToChannel_name": {
              "type": "string"
            },
            "workflows_ProvisionGenie_CreateTeam_name": {
              "type": "string"
            },
            "userAssignedIdentities_ProvisionGenie_ManagedIdentity_name": {
              "type": "string"
            },
            "connections_commondataservice_name": {
              "type": "string"
            },
            "resourceLocation": {
              "type": "string"
            },
            "DataverseEnvironmentId": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Logic/workflows",
              "apiVersion": "2019-05-01",
              "name": "[parameters('workflows_ProvisionGenie_Main_name')]",
              "location": "[parameters('resourceLocation')]",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities/', parameters('userAssignedIdentities_ProvisionGenie_ManagedIdentity_name')))]": {}
                }
              },
              "properties": {
                "state": "Enabled",
                "definition": {
                  "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
                  "contentVersion": "1.0.0.0",
                  "parameters": {
                    "$connections": {
                      "defaultValue": {},
                      "type": "Object"
                    },
                    "DataverseEnvironmentId": {
                      "defaultValue": "[parameters('DataverseEnvironmentId')]",
                      "type": "String"
                    }
                  },
                  "triggers": {
                    "When_a_record_is_created": {
                      "type": "ApiConnectionWebhook",
                      "inputs": {
                        "body": {
                          "NotificationUrl": "@{listCallbackUrl()}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['commondataservice']['connectionId']"
                          }
                        },
                        "path": "/datasets/@{encodeURIComponent(encodeURIComponent(parameters('DataverseEnvironmentId')))}/tables/@{encodeURIComponent(encodeURIComponent('cy_teamsrequests'))}/onnewitemswebhook",
                        "queries": {
                          "scope": "Organization"
                        }
                      }
                    }
                  },
                  "actions": {
                    "Channels": {
                      "runAfter": {
                        "Complete_Technical_Name_in_Teams_request": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "Channels",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Complete_Technical_Name_in_Teams_request": {
                      "runAfter": {
                        "Generate_Team_internal_name": [
                          "Succeeded"
                        ]
                      },
                      "type": "ApiConnection",
                      "inputs": {
                        "body": {
                          "_ownerid_type": "",
                          "cy_teamtechnicalname": "@{outputs('Generate_Team_internal_name')}"
                        },
                        "host": {
                          "connection": {
                            "name": "@parameters('$connections')['commondataservice']['connectionId']"
                          }
                        },
                        "method": "patch",
                        "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('DataverseEnvironmentId')))}/tables/@{encodeURIComponent(encodeURIComponent('cy_teamsrequests'))}/items/@{encodeURIComponent(encodeURIComponent(triggerBody()?['cy_teamsrequestid']))}"
                      }
                    },
                    "Condition_Include_Notebook": {
                      "actions": {
                        "ProvisionGenie-AddNotebook": {
                          "runAfter": {},
                          "type": "Workflow",
                          "inputs": {
                            "body": {
                              "teamId": "@body('Parse_HTTP_body_for_Team_Id')?['TeamId']",
                              "teamName": "@triggerBody()?['cy_teamname']",
                              "teamsTechnicalName": "@body('Complete_Technical_Name_in_Teams_request')?['cy_teamtechnicalname']"
                            },
                            "host": {
                              "triggerName": "manual",
                              "workflow": {
                                "id": "[resourceId('Microsoft.Logic/workflows', parameters('workflows_ProvisionGenie_AddNotebook_name'))]"
                              }
                            }
                          }
                        }
                      },
                      "runAfter": {
                        "Condition_Include_welcome_package": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@body('Complete_Technical_Name_in_Teams_request')?['pg_includenotebook']",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_Include_welcome_package": {
                      "actions": {
                        "ProvisionGenie-Welcome": {
                          "runAfter": {},
                          "type": "Workflow",
                          "inputs": {
                            "body": {
                              "Owner": "@triggerBody()?['cy_teamowner']",
                              "TeamId": "@body('Parse_HTTP_body_for_Team_Id')?['TeamId']"
                            },
                            "host": {
                              "triggerName": "manual",
                              "workflow": {
                                "id": "[resourceId('Microsoft.Logic/workflows', parameters('workflows_ProvisionGenie_Welcome_name'))]"
                              }
                            }
                          }
                        }
                      },
                      "runAfter": {
                        "Condition_include_task_list": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@triggerBody()?['cy_includewelcomepackage']",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "Condition_include_task_list": {
                      "actions": {
                        "ProvisionGenie-CreateTaskList": {
                          "runAfter": {},
                          "type": "Workflow",
                          "inputs": {
                            "body": {
                              "siteId": "@{outputs('Compose_id')}"
                            },
                            "host": {
                              "triggerName": "manual",
                              "workflow": {
                                "id": "[resourceId('Microsoft.Logic/workflows', parameters('workflows_ProvisionGenie_CreateTaskList_name'))]"
                              }
                            }
                          }
                        }
                      },
                      "runAfter": {
                        "Scope_Add_People": [
                          "Succeeded"
                        ]
                      },
                      "expression": {
                        "and": [
                          {
                            "equals": [
                              "@triggerBody()?['cy_includetasklist']",
                              "@true"
                            ]
                          }
                        ]
                      },
                      "type": "If"
                    },
                    "DriveExistsCode": {
                      "runAfter": {
                        "Channels": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "DriveExistsCode",
                            "type": "integer"
                          }
                        ]
                      }
                    },
                    "Generate_Team_internal_name": {
                      "runAfter": {},
                      "type": "Compose",
                      "inputs": "@{replace(triggerBody()?['cy_teamname'],' ','')}_@{guid()}"
                    },
                    "Guests": {
                      "runAfter": {
                        "Owners": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "Guests",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "LibraryColumns": {
                      "runAfter": {
                        "SiteExistsCode": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "LibraryColumns",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "ListColumns": {
                      "runAfter": {
                        "LibraryColumns": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "ListColumns",
                            "type": "array"
                          }
                        ]
                      }
                    },
                    "Members": {
                      "runAfter": {
                        "ListColumns": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "Members",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Owners": {
                      "runAfter": {
                        "Members": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "Owners",
                            "type": "string"
                          }
                        ]
                      }
                    },
                    "Scope_Add_People": {
                      "actions": {
                        "Condition": {
                          "actions": {
                            "ProvisionGenie-AddPeople": {
                              "runAfter": {},
                              "type": "Workflow",
                              "inputs": {
                                "body": {
                                  "guests": "@{substring(variables('Guests'),0,sub(length(variables('Guests')),1))}",
                                  "members": "@substring(variables('Members'),0,sub(length(variables('Members')),1))",
                                  "owners": "@{substring(variables('Owners'),0,sub(length(variables('Owners')),1))}",
                                  "teamId": "@body('Parse_HTTP_body_for_Team_Id')?['TeamId']",
                                  "teamName": "@body('Complete_Technical_Name_in_Teams_request')?['cy_teamtechnicalname']"
                                },
                                "host": {
                                  "triggerName": "manual",
                                  "workflow": {
                                    "id": "[resourceId('Microsoft.Logic/workflows', parameters('workflows_ProvisionGenie_AddPeople_name'))]"
                                  }
                                }
                              }
                            }
                          },
                          "runAfter": {
                            "For_each_owner": [
                              "Succeeded"
                            ]
                          },
                          "expression": {
                            "or": [
                              {
                                "greater": [
                                  "@length(variables('Members'))",
                                  0
                                ]
                              },
                              {
                                "greater": [
                                  "@length(variables('Owners'))",
                                  0
                                ]
                              },
                              {
                                "greater": [
                                  "@length(variables('Guests'))",
                                  0
                                ]
                              }
                            ]
                          },
                          "type": "If"
                        },
                        "For_each_guest": {
                          "foreach": "@body('List_rows_for_guests')?['value']",
                          "actions": {
                            "Append_to_string_variable_4": {
                              "runAfter": {
                                "Get_row_3": [
                                  "Succeeded"
                                ]
                              },
                              "type": "AppendToStringVariable",
                              "inputs": {
                                "name": "Guests",
                                "value": "{\n  \"Organization\": \"@{body('Get_row_3')?['pg_guestorganization']}\",\n  \"UPN\": \"@{body('Get_row_3')?['pg_name']}\",\n  \"firstName\": \"@{body('Get_row_3')?['pg_firstname']}\",\n  \"lastName\": \"@{body('Get_row_3')?['pg_lastname']}\"\n}$"
                              }
                            },
                            "Get_row_3": {
                              "runAfter": {},
                              "type": "ApiConnection",
                              "inputs": {
                                "host": {
                                  "connection": {
                                    "name": "@parameters('$connections')['commondataservice']['connectionId']"
                                  }
                                },
                                "method": "get",
                                "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('DataverseEnvironmentId')))}/tables/@{encodeURIComponent(encodeURIComponent('pg_teamsusers'))}/items/@{encodeURIComponent(encodeURIComponent(items('For_each_guest')?['pg_teamsuserid']))}"
                              }
                            }
                          },
                          "runAfter": {
                            "List_rows_for_guests": [
                              "Succeeded"
                            ]
                          },
                          "type": "Foreach"
                        },
                        "For_each_member": {
                          "foreach": "@body('List_rows_for_members')?['value']",
                          "actions": {
                            "Append_to_string_variable": {
                              "runAfter": {
                                "Get_row": [
                                  "Succeeded"
                                ]
                              },
                              "type": "AppendToStringVariable",
                              "inputs": {
                                "name": "Members",
                                "value": "@{body('Get_row')?['pg_name']};"
                              }
                            },
                            "Get_row": {
                              "runAfter": {},
                              "type": "ApiConnection",
                              "inputs": {
                                "host": {
                                  "connection": {
                                    "name": "@parameters('$connections')['commondataservice']['connectionId']"
                                  }
                                },
                                "method": "get",
                                "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('DataverseEnvironmentId')))}/tables/@{encodeURIComponent(encodeURIComponent('pg_teamsusers'))}/items/@{encodeURIComponent(encodeURIComponent(items('For_each_member')?['pg_teamsuserid']))}"
                              }
                            }
                          },
                          "runAfter": {
                            "List_rows_for_members": [
                              "Succeeded"
                            ]
                          },
                          "type": "Foreach"
                        },
                        "For_each_owner": {
                          "foreach": "@body('List_rows_owner')?['value']",
                          "actions": {
                            "Append_to_string_variable_2": {
                              "runAfter": {
                                "Get_row_2": [
                                  "Succeeded"
                                ]
                              },
                              "type": "AppendToStringVariable",
                              "inputs": {
                                "name": "Owners",
                                "value": "@{body('Get_row_2')?['pg_name']};"
                              }
                            },
                            "Get_row_2": {
                              "runAfter": {},
                              "type": "ApiConnection",
                              "inputs": {
                                "host": {
                                  "connection": {
                                    "name": "@parameters('$connections')['commondataservice']['connectionId']"
                                  }
                                },
                                "method": "get",
                                "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('DataverseEnvironmentId')))}/tables/@{encodeURIComponent(encodeURIComponent('pg_teamsusers'))}/items/@{encodeURIComponent(encodeURIComponent(items('For_each_owner')?['pg_teamsuserid']))}"
                              }
                            }
                          },
                          "runAfter": {
                            "List_rows_owner": [
                              "Succeeded"
                            ]
                          },
                          "type": "Foreach"
                        },
                        "List_rows_for_guests": {
                          "runAfter": {
                            "For_each_member": [
                              "Succeeded"
                            ]
                          },
                          "type": "ApiConnection",
                          "inputs": {
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['commondataservice']['connectionId']"
                              }
                            },
                            "method": "get",
                            "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('DataverseEnvironmentId')))}/tables/@{encodeURIComponent(encodeURIComponent('pg_teamsuser_teamsrequest_guestsset'))}/items",
                            "queries": {
                              "$filter": "cy_teamsrequestid eq '@{triggerBody()?['cy_teamsrequestid']}' "
                            }
                          }
                        },
                        "List_rows_for_members": {
                          "runAfter": {},
                          "type": "ApiConnection",
                          "inputs": {
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['commondataservice']['connectionId']"
                              }
                            },
                            "method": "get",
                            "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('DataverseEnvironmentId')))}/tables/@{encodeURIComponent(encodeURIComponent('pg_teamsuser_teamsrequest_membersset'))}/items",
                            "queries": {
                              "$filter": "cy_teamsrequestid eq '@{triggerBody()?['cy_teamsrequestid']}' "
                            }
                          }
                        },
                        "List_rows_owner": {
                          "runAfter": {
                            "For_each_guest": [
                              "Succeeded"
                            ]
                          },
                          "type": "ApiConnection",
                          "inputs": {
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['commondataservice']['connectionId']"
                              }
                            },
                            "method": "get",
                            "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('DataverseEnvironmentId')))}/tables/@{encodeURIComponent(encodeURIComponent('pg_teamsuser_teamsrequest_ownersset'))}/items",
                            "queries": {
                              "$filter": "cy_teamsrequestid eq '@{triggerBody()?['cy_teamsrequestid']}'"
                            }
                          }
                        }
                      },
                      "runAfter": {
                        "Scope_Create_Lists_and_Libraries": [
                          "Succeeded"
                        ]
                      },
                      "type": "Scope"
                    },
                    "Scope_Create_Lists_and_Libraries": {
                      "actions": {
                        "For_each_SharePoint_Library_record": {
                          "foreach": "@body('List_related_SharePoint_Library_records')?['value']",
                          "actions": {
                            "Condition_Library_is_linked_to_Channel": {
                              "actions": {
                                "Get_Channel_for_Library": {
                                  "runAfter": {},
                                  "type": "ApiConnection",
                                  "inputs": {
                                    "host": {
                                      "connection": {
                                        "name": "@parameters('$connections')['commondataservice']['connectionId']"
                                      }
                                    },
                                    "method": "get",
                                    "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('DataverseEnvironmentId')))}/tables/@{encodeURIComponent(encodeURIComponent('cy_teamchannels'))}/items/@{encodeURIComponent(encodeURIComponent(items('For_each_SharePoint_Library_record')?['_pg_channel_value']))}"
                                  }
                                },
                                "ProvisionGenie-PinTabToChannel_for_Library": {
                                  "runAfter": {
                                    "Get_Channel_for_Library": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "Workflow",
                                  "inputs": {
                                    "body": {
                                      "channelId": "@body('Get_Channel_for_Library')?['pg_channelid']",
                                      "tabName": "@items('For_each_SharePoint_Library_record')?['cy_libraryname']",
                                      "tabType": "Library",
                                      "tabUrl": "@{body('ProvisionGenie-CreateListLibrary_for_Library')['webUrl']}",
                                      "teamId": "@body('Parse_HTTP_body_for_Team_Id')?['TeamId']"
                                    },
                                    "host": {
                                      "triggerName": "manual",
                                      "workflow": {
                                        "id": "[resourceId('Microsoft.Logic/workflows', parameters('workflows_ProvisionGenie_PinTabToChannel_name'))]"
                                      }
                                    }
                                  }
                                }
                              },
                              "runAfter": {
                                "ProvisionGenie-CreateListLibrary_for_Library": [
                                  "Succeeded"
                                ]
                              },
                              "expression": {
                                "and": [
                                  {
                                    "not": {
                                      "equals": [
                                        "@items('For_each_SharePoint_Library_record')?['_pg_channel_value']",
                                        null
                                      ]
                                    }
                                  }
                                ]
                              },
                              "type": "If"
                            },
                            "For_each_Library_Column_record": {
                              "foreach": "@body('List_related_Library_Column_records')?['value']",
                              "actions": {
                                "Append_column_definition_to_LibraryColumns": {
                                  "runAfter": {},
                                  "type": "AppendToArrayVariable",
                                  "inputs": {
                                    "name": "LibraryColumns",
                                    "value": {
                                      "columnName": "@{items('For_each_Library_Column_record')?['cy_columnname']}",
                                      "columnType": "@{items('For_each_Library_Column_record')?['_cy_columntype_label']}",
                                      "columnvalues": "@if(equals(items('For_each_Library_Column_record')?['_cy_columntype_label'],'Choice'),array(split(items('For_each_Library_Column_record')?['cy_columnvalues'],',')),null)"
                                    }
                                  }
                                }
                              },
                              "runAfter": {
                                "List_related_Library_Column_records": [
                                  "Succeeded"
                                ]
                              },
                              "type": "Foreach",
                              "description": "Append column information to LibraryColumns variable"
                            },
                            "List_related_Library_Column_records": {
                              "runAfter": {},
                              "type": "ApiConnection",
                              "inputs": {
                                "host": {
                                  "connection": {
                                    "name": "@parameters('$connections')['commondataservice']['connectionId']"
                                  }
                                },
                                "method": "get",
                                "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('DataverseEnvironmentId')))}/tables/@{encodeURIComponent(encodeURIComponent('cy_listcolumns'))}/items",
                                "queries": {
                                  "$filter": "_cy_sharepointlibrary_value eq '@{items('For_each_SharePoint_Library_record')?['cy_sharepointlibraryid']}'"
                                }
                              },
                              "description": "Get the columns related to this library record"
                            },
                            "ProvisionGenie-CreateListLibrary_for_Library": {
                              "runAfter": {
                                "For_each_Library_Column_record": [
                                  "Succeeded"
                                ]
                              },
                              "type": "Workflow",
                              "inputs": {
                                "body": {
                                  "columns": "@variables('LibraryColumns')",
                                  "resourceName": "@items('For_each_SharePoint_Library_record')?['cy_libraryname']",
                                  "resourceType": "Library",
                                  "siteId": "@{outputs('Compose_id')}"
                                },
                                "host": {
                                  "triggerName": "manual",
                                  "workflow": {
                                    "id": "[resourceId('Microsoft.Logic/workflows', parameters('workflows_ProvisionGenie_CreateListLibrary_name'))]"
                                  }
                                }
                              }
                            }
                          },
                          "runAfter": {
                            "List_related_SharePoint_Library_records": [
                              "Succeeded"
                            ]
                          },
                          "type": "Foreach",
                          "description": "Get column information and call child logic app to create the library",
                          "runtimeConfiguration": {
                            "concurrency": {
                              "repetitions": 1
                            }
                          }
                        },
                        "For_each_SharePoint_List_record": {
                          "foreach": "@body('List_related_SharePoint_List_records')?['value']",
                          "actions": {
                            "Condition_List_is_linked_to_Channel": {
                              "actions": {
                                "Get_Channel_for_List": {
                                  "runAfter": {},
                                  "type": "ApiConnection",
                                  "inputs": {
                                    "host": {
                                      "connection": {
                                        "name": "@parameters('$connections')['commondataservice']['connectionId']"
                                      }
                                    },
                                    "method": "get",
                                    "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('DataverseEnvironmentId')))}/tables/@{encodeURIComponent(encodeURIComponent('cy_teamchannels'))}/items/@{encodeURIComponent(encodeURIComponent(items('For_each_SharePoint_List_record')?['_pg_channel_value']))}"
                                  }
                                },
                                "ProvisionGenie-PinTabToChannel_for_List": {
                                  "runAfter": {
                                    "Get_Channel_for_List": [
                                      "Succeeded"
                                    ]
                                  },
                                  "type": "Workflow",
                                  "inputs": {
                                    "body": {
                                      "channelId": "@body('Get_Channel_for_List')?['pg_channelid']",
                                      "tabName": "@items('For_each_SharePoint_List_record')?['cy_listname']",
                                      "tabType": "List",
                                      "tabUrl": "@{body('ProvisionGenie-CreateListLibrary_for_List')['webUrl']}",
                                      "teamId": "@body('Parse_HTTP_body_for_Team_Id')?['TeamId']"
                                    },
                                    "host": {
                                      "triggerName": "manual",
                                      "workflow": {
                                        "id": "[resourceId('Microsoft.Logic/workflows', parameters('workflows_ProvisionGenie_PinTabToChannel_name'))]"
                                      }
                                    }
                                  }
                                }
                              },
                              "runAfter": {
                                "ProvisionGenie-CreateListLibrary_for_List": [
                                  "Succeeded"
                                ]
                              },
                              "expression": {
                                "and": [
                                  {
                                    "not": {
                                      "equals": [
                                        "@items('For_each_SharePoint_List_record')?['_pg_channel_value']",
                                        null
                                      ]
                                    }
                                  }
                                ]
                              },
                              "type": "If"
                            },
                            "For_each_List_Column_record": {
                              "foreach": "@body('List_related_List_Column_records')?['value']",
                              "actions": {
                                "Append_column_definition_to_ListColumns": {
                                  "runAfter": {},
                                  "type": "AppendToArrayVariable",
                                  "inputs": {
                                    "name": "ListColumns",
                                    "value": {
                                      "columnName": "@{items('For_each_List_Column_record')?['cy_columnname']}",
                                      "columnType": "@{items('For_each_List_Column_record')?['_cy_columntype_label']}",
                                      "columnvalues": "@if(equals(items('For_each_List_Column_record')?['_cy_columntype_label'],'Choice'),array(split(items('For_each_List_Column_record')?['cy_columnvalues'],',')),null)"
                                    }
                                  }
                                }
                              },
                              "runAfter": {
                                "List_related_List_Column_records": [
                                  "Succeeded"
                                ]
                              },
                              "type": "Foreach",
                              "description": "Append column information to ListColumn variable"
                            },
                            "List_related_List_Column_records": {
                              "runAfter": {},
                              "type": "ApiConnection",
                              "inputs": {
                                "host": {
                                  "connection": {
                                    "name": "@parameters('$connections')['commondataservice']['connectionId']"
                                  }
                                },
                                "method": "get",
                                "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('DataverseEnvironmentId')))}/tables/@{encodeURIComponent(encodeURIComponent('cy_listcolumns'))}/items",
                                "queries": {
                                  "$filter": "_cy_sharepointlist_value eq '@{items('For_each_SharePoint_List_record')?['cy_sharepointlistid']}'"
                                }
                              },
                              "description": "Get the columns in this list record"
                            },
                            "ProvisionGenie-CreateListLibrary_for_List": {
                              "runAfter": {
                                "For_each_List_Column_record": [
                                  "Succeeded"
                                ]
                              },
                              "type": "Workflow",
                              "inputs": {
                                "body": {
                                  "columns": "@variables('ListColumns')",
                                  "resourceName": "@items('For_each_SharePoint_List_record')?['cy_listname']",
                                  "resourceType": "List",
                                  "siteId": "@{outputs('Compose_id')}"
                                },
                                "host": {
                                  "triggerName": "manual",
                                  "workflow": {
                                    "id": "[resourceId('Microsoft.Logic/workflows', parameters('workflows_ProvisionGenie_CreateListLibrary_name'))]"
                                  }
                                }
                              }
                            }
                          },
                          "runAfter": {
                            "List_related_SharePoint_List_records": [
                              "Succeeded"
                            ]
                          },
                          "type": "Foreach",
                          "description": "Get column information and call child logic app to create the list",
                          "runtimeConfiguration": {
                            "concurrency": {
                              "repetitions": 1
                            }
                          }
                        },
                        "List_related_SharePoint_Library_records": {
                          "runAfter": {
                            "For_each_SharePoint_List_record": [
                              "Succeeded"
                            ]
                          },
                          "type": "ApiConnection",
                          "inputs": {
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['commondataservice']['connectionId']"
                              }
                            },
                            "method": "get",
                            "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('DataverseEnvironmentId')))}/tables/@{encodeURIComponent(encodeURIComponent('cy_sharepointlibraries'))}/items",
                            "queries": {
                              "$filter": "_cy_teamsrequest_value eq '@{triggerBody()?['cy_teamsrequestid']}'"
                            }
                          },
                          "description": "Get SharePoint Library records related to the Teams request"
                        },
                        "List_related_SharePoint_List_records": {
                          "runAfter": {},
                          "type": "ApiConnection",
                          "inputs": {
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['commondataservice']['connectionId']"
                              }
                            },
                            "method": "get",
                            "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('DataverseEnvironmentId')))}/tables/@{encodeURIComponent(encodeURIComponent('cy_sharepointlists'))}/items",
                            "queries": {
                              "$filter": "_cy_teamsrequest_value eq '@{triggerBody()?['cy_teamsrequestid']}'"
                            }
                          },
                          "description": "Get SharePoint List records related to the Teams request"
                        }
                      },
                      "runAfter": {
                        "Scope_Create_Team": [
                          "Succeeded"
                        ]
                      },
                      "type": "Scope"
                    },
                    "Scope_Create_Team": {
                      "actions": {
                        "Compose_files_folder_path": {
                          "runAfter": {
                            "Until_drive_exists": [
                              "Succeeded"
                            ]
                          },
                          "type": "Compose",
                          "inputs": "@replace(body('HTTP_to_check_if_root_drive_exists')['webUrl'],body('Get_Team_root_site')['webUrl'],'')"
                        },
                        "For_each_created_Channel": {
                          "foreach": "@body('Parse_HTTP_body_for_Team_Id')?['ChannelInfo']",
                          "actions": {
                            "Condition_Channel_present": {
                              "actions": {
                                "Add_Id_for_Channel": {
                                  "runAfter": {},
                                  "type": "ApiConnection",
                                  "inputs": {
                                    "body": {
                                      "_ownerid_type": "",
                                      "pg_channelid": "@items('For_each_created_Channel')?['Id']"
                                    },
                                    "host": {
                                      "connection": {
                                        "name": "@parameters('$connections')['commondataservice']['connectionId']"
                                      }
                                    },
                                    "method": "patch",
                                    "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('DataverseEnvironmentId')))}/tables/@{encodeURIComponent(encodeURIComponent('cy_teamchannels'))}/items/@{encodeURIComponent(encodeURIComponent(first(body('Get_Channel_Info')?['value'])?['cy_teamchannelid']))}"
                                  }
                                }
                              },
                              "runAfter": {
                                "Get_Channel_Info": [
                                  "Succeeded"
                                ]
                              },
                              "else": {
                                "actions": {
                                  "Add_Id_for_General_Channel": {
                                    "runAfter": {
                                      "Get_General_Channel": [
                                        "Succeeded"
                                      ]
                                    },
                                    "type": "ApiConnection",
                                    "inputs": {
                                      "body": {
                                        "_ownerid_type": "",
                                        "pg_channelid": "@items('For_each_created_Channel')?['Id']"
                                      },
                                      "host": {
                                        "connection": {
                                          "name": "@parameters('$connections')['commondataservice']['connectionId']"
                                        }
                                      },
                                      "method": "patch",
                                      "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('DataverseEnvironmentId')))}/tables/@{encodeURIComponent(encodeURIComponent('cy_teamchannels'))}/items/@{encodeURIComponent(encodeURIComponent(first(body('Get_General_Channel')?['value'])?['cy_teamchannelid']))}"
                                    }
                                  },
                                  "Get_General_Channel": {
                                    "runAfter": {},
                                    "type": "ApiConnection",
                                    "inputs": {
                                      "host": {
                                        "connection": {
                                          "name": "@parameters('$connections')['commondataservice']['connectionId']"
                                        }
                                      },
                                      "method": "get",
                                      "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('DataverseEnvironmentId')))}/tables/@{encodeURIComponent(encodeURIComponent('cy_teamchannels'))}/items",
                                      "queries": {
                                        "$filter": "_cy_teamsrequest_value eq '@{triggerBody()?['cy_teamsrequestid']}' and cy_channelname eq 'General'"
                                      }
                                    },
                                    "description": "Will only run for other languages (when General channel has a different name, e.g. Algemeen)"
                                  }
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "greater": [
                                      "@length(body('Get_Channel_Info')?['value'])",
                                      0
                                    ]
                                  }
                                ]
                              },
                              "type": "If"
                            },
                            "Get_Channel_Info": {
                              "runAfter": {},
                              "type": "ApiConnection",
                              "inputs": {
                                "host": {
                                  "connection": {
                                    "name": "@parameters('$connections')['commondataservice']['connectionId']"
                                  }
                                },
                                "method": "get",
                                "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('DataverseEnvironmentId')))}/tables/@{encodeURIComponent(encodeURIComponent('cy_teamchannels'))}/items",
                                "queries": {
                                  "$filter": "_cy_teamsrequest_value eq '@{triggerBody()?['cy_teamsrequestid']}' and cy_channelname eq '@{items('For_each_created_Channel')?['Name']}'"
                                }
                              }
                            }
                          },
                          "runAfter": {
                            "Parse_HTTP_body_for_Team_Id": [
                              "Succeeded"
                            ]
                          },
                          "type": "Foreach"
                        },
                        "For_each_related_Channel": {
                          "foreach": "@body('List_related_Team_Channel_records')?['value']",
                          "actions": {
                            "Append_to_Channels": {
                              "runAfter": {},
                              "type": "AppendToArrayVariable",
                              "inputs": {
                                "name": "Channels",
                                "value": {
                                  "description": "@{items('For_each_related_Channel')?['cy_channeldescription']}",
                                  "displayName": "@{items('For_each_related_Channel')?['cy_channelname']}",
                                  "isFavoriteByDefault": "@items('For_each_related_Channel')?['cy_autofavorite']"
                                }
                              }
                            }
                          },
                          "runAfter": {
                            "List_related_Team_Channel_records": [
                              "Succeeded"
                            ]
                          },
                          "type": "Foreach",
                          "description": "Append channel information to Channels variable"
                        },
                        "List_related_Team_Channel_records": {
                          "runAfter": {},
                          "type": "ApiConnection",
                          "inputs": {
                            "host": {
                              "connection": {
                                "name": "@parameters('$connections')['commondataservice']['connectionId']"
                              }
                            },
                            "method": "get",
                            "path": "/v2/datasets/@{encodeURIComponent(encodeURIComponent(parameters('DataverseEnvironmentId')))}/tables/@{encodeURIComponent(encodeURIComponent('cy_teamchannels'))}/items",
                            "queries": {
                              "$filter": "_cy_teamsrequest_value eq '@{triggerBody()?['cy_teamsrequestid']}' and cy_channelname ne 'General'"
                            }
                          },
                          "description": "Get the channels related to the trigger's Teams request"
                        },
                        "Parse_HTTP_body_for_Team_Id": {
                          "runAfter": {
                            "ProvisionGenie-CreateTeam": [
                              "Succeeded"
                            ]
                          },
                          "type": "ParseJson",
                          "inputs": {
                            "content": "@body('ProvisionGenie-CreateTeam')",
                            "schema": {
                              "properties": {
                                "ChannelInfo": {
                                  "items": {
                                    "properties": {
                                      "Id": {
                                        "type": "string"
                                      },
                                      "Name": {
                                        "type": "string"
                                      }
                                    },
                                    "required": [
                                      "Id",
                                      "Name"
                                    ],
                                    "type": "object"
                                  },
                                  "type": "array"
                                },
                                "TeamId": {
                                  "type": "string"
                                },
                                "TeamsDisplayName": {
                                  "type": "string"
                                }
                              },
                              "type": "object"
                            }
                          }
                        },
                        "ProvisionGenie-CreateTeam": {
                          "runAfter": {
                            "For_each_related_Channel": [
                              "Succeeded"
                            ]
                          },
                          "type": "Workflow",
                          "inputs": {
                            "body": {
                              "Channels": "@variables('Channels')",
                              "Description": "@triggerBody()?['cy_teamdescription']",
                              "Display Name": "@triggerBody()?['cy_teamname']",
                              "Owner UPN": "@triggerBody()?['cy_teamowner']",
                              "Technical Name": "@{outputs('Generate_Team_internal_name')}"
                            },
                            "host": {
                              "triggerName": "manual",
                              "workflow": {
                                "id": "[resourceId('Microsoft.Logic/workflows', parameters('workflows_ProvisionGenie_CreateTeam_name'))]"
                              }
                            }
                          }
                        },
                        "Until_drive_exists": {
                          "actions": {
                            "Condition_DriveExistsCode_200": {
                              "actions": {},
                              "runAfter": {
                                "Update_DriveExistsCode": [
                                  "Succeeded"
                                ]
                              },
                              "else": {
                                "actions": {
                                  "Delay_2": {
                                    "runAfter": {},
                                    "type": "Wait",
                                    "inputs": {
                                      "interval": {
                                        "count": 30,
                                        "unit": "Second"
                                      }
                                    }
                                  }
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "equals": [
                                      "@variables('DriveExistsCode')",
                                      200
                                    ]
                                  }
                                ]
                              },
                              "type": "If"
                            },
                            "HTTP_to_check_if_root_drive_exists": {
                              "runAfter": {},
                              "type": "Http",
                              "inputs": {
                                "authentication": {
                                  "audience": "https://graph.microsoft.com",
                                  "identity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentities_ProvisionGenie_ManagedIdentity_name'))]",
                                  "type": "ManagedServiceIdentity"
                                },
                                "method": "GET",
                                "uri": "https://graph.microsoft.com/v1.0/groups/@{body('Parse_HTTP_body_for_Team_Id')?['TeamId']}/drive/root"
                              }
                            },
                            "Update_DriveExistsCode": {
                              "runAfter": {
                                "HTTP_to_check_if_root_drive_exists": [
                                  "Succeeded"
                                ]
                              },
                              "type": "SetVariable",
                              "inputs": {
                                "name": "DriveExistsCode",
                                "value": "@outputs('HTTP_to_check_if_root_drive_exists')['statusCode']"
                              }
                            }
                          },
                          "runAfter": {
                            "Until_root_site_exists": [
                              "Succeeded"
                            ]
                          },
                          "expression": "@equals(variables('DriveExistsCode'), 200)",
                          "limit": {
                            "count": 1000,
                            "timeout": "PT1H"
                          },
                          "type": "Until",
                          "description": "Wait until the folder is created - otherwise following actions will fail"
                        },
                        "Until_root_site_exists": {
                          "actions": {
                            "Compose_id": {
                              "runAfter": {
                                "Compose_webUrl": [
                                  "Succeeded"
                                ]
                              },
                              "type": "Compose",
                              "inputs": "@outputs('Get_Team_root_site')?['body']['id']"
                            },
                            "Compose_webUrl": {
                              "runAfter": {
                                "Get_Team_root_site": [
                                  "Succeeded"
                                ]
                              },
                              "type": "Compose",
                              "inputs": "@outputs('Get_Team_root_site')?['body']['webUrl']"
                            },
                            "Condition_SiteExistsCode_200": {
                              "actions": {},
                              "runAfter": {
                                "Update_SiteExistsCode": [
                                  "Succeeded"
                                ]
                              },
                              "else": {
                                "actions": {
                                  "Delay": {
                                    "runAfter": {},
                                    "type": "Wait",
                                    "inputs": {
                                      "interval": {
                                        "count": 30,
                                        "unit": "Second"
                                      }
                                    }
                                  }
                                }
                              },
                              "expression": {
                                "and": [
                                  {
                                    "equals": [
                                      "@variables('SiteExistsCode')",
                                      200
                                    ]
                                  }
                                ]
                              },
                              "type": "If"
                            },
                            "Get_Team_root_site": {
                              "runAfter": {},
                              "type": "Http",
                              "inputs": {
                                "authentication": {
                                  "audience": "https://graph.microsoft.com",
                                  "identity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', parameters('userAssignedIdentities_ProvisionGenie_ManagedIdentity_name'))]",
                                  "type": "ManagedServiceIdentity"
                                },
                                "method": "GET",
                                "uri": "https://graph.microsoft.com/v1.0/groups/@{body('Parse_HTTP_body_for_Team_Id')?['TeamId']}/sites/root"
                              }
                            },
                            "Update_SiteExistsCode": {
                              "runAfter": {
                                "Compose_id": [
                                  "Succeeded"
                                ]
                              },
                              "type": "SetVariable",
                              "inputs": {
                                "name": "SiteExistsCode",
                                "value": "@outputs('Get_Team_root_site')['statusCode']"
                              }
                            }
                          },
                          "runAfter": {
                            "Parse_HTTP_body_for_Team_Id": [
                              "Succeeded"
                            ]
                          },
                          "expression": "@equals(variables('SiteExistsCode'), 200)",
                          "limit": {
                            "count": 1000,
                            "timeout": "PT1H"
                          },
                          "type": "Until",
                          "description": "Wait until the root site exists - otherwise following actions will fail"
                        }
                      },
                      "runAfter": {
                        "Wait_1_minute_to_add_channels": [
                          "Succeeded"
                        ]
                      },
                      "type": "Scope",
                      "description": "Get channel information, create team and wait for team creation to complete"
                    },
                    "SiteExistsCode": {
                      "runAfter": {
                        "DriveExistsCode": [
                          "Succeeded"
                        ]
                      },
                      "type": "InitializeVariable",
                      "inputs": {
                        "variables": [
                          {
                            "name": "SiteExistsCode",
                            "type": "integer"
                          }
                        ]
                      }
                    },
                    "Wait_1_minute_to_add_channels": {
                      "runAfter": {
                        "Guests": [
                          "Succeeded"
                        ]
                      },
                      "type": "Wait",
                      "inputs": {
                        "interval": {
                          "count": 1,
                          "unit": "Minute"
                        }
                      },
                      "description": "Wait 1 minute to provide time for the channels to be linked to the team that has been created"
                    }
                  },
                  "outputs": {}
                },
                "parameters": {
                  "$connections": {
                    "value": {
                      "commondataservice": {
                        "connectionId": "[resourceId('Microsoft.Web/connections', parameters('connections_commondataservice_name'))]",
                        "connectionName": "commondataservice",
                        "id": "[format('{0}/providers/Microsoft.Web/locations/{1}/managedApis/commondataservice', subscription().id, parameters('resourceLocation'))]"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'addNotebookDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'addPeopleDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'connectionsDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'createListLibraryDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'createTaskListDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'createTeamDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'managedIdentityDeployment')]",
        "[resourceId('Microsoft.Resources/deployments', 'welcomePackageDeployment')]"
      ]
    }
  ]
}